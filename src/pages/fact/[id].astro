---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Header from '../../components/Header.astro';
import type { Fact } from '../../types/fact';
import factsData from '../../data/facts.json';
import { getCategoryColor } from '../../utils/colors';

// In server mode, read directly from params
const { id } = Astro.params;
const allFacts: Fact[] = factsData.facts;
const fact = allFacts.find(f => f.id === id);

// 404 if fact not found
if (!fact) {
  return Astro.redirect('/404');
}

const { title, content, category, subcategory, wonderScore, source, sourceUrl, deepDive, relatedLinks } = fact;

// Get category color for theming
const categoryColor = getCategoryColor(category);

// Format date
const factDate = new Date(fact.generated);
const formattedDate = factDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
});
---

<BaseLayout
  title={`${title} — That's interesting.`}
  description={content.substring(0, 160)}
  type="article"
>
  <Header currentPage="facts" />

  <!-- Reading Progress Bar -->
  <div class="progress-bar" id="progressBar"></div>

  <main class="article-container" style={`--category-color: ${categoryColor};`}>
    <!-- Breadcrumb -->
    <nav class="breadcrumb" aria-label="Breadcrumb">
      <a href="/">Home</a>
      <span class="separator">/</span>
      <span class="current">{title}</span>
    </nav>

    <!-- Article Header -->
    <article class="article">
      <header class="article-header">
        <div class="article-meta">
          <a href={`/category/${encodeURIComponent(category)}`} class="category">{category}</a>
          {subcategory && (
            <>
              <span class="separator">·</span>
              <span class="subcategory">{subcategory}</span>
            </>
          )}
          <span class="separator">·</span>
          <time datetime={fact.generated}>{formattedDate}</time>
        </div>

        <h1 class="article-title">{title}</h1>

        <div class="article-stats">
          <div class="stat-badge">
            <span class="stat-label">Wonder Score</span>
            <span class="stat-value">{wonderScore}<span class="stat-max">/10</span></span>
          </div>
        </div>
      </header>

      <!-- Article Content -->
      <div class="article-content">
        {content.split('\n\n').map((para, index) => (
          <p class:list={['lead', { 'first-paragraph': index === 0 }]}>{para.trim()}</p>
        ))}

        {deepDive && (
          <div class="deep-dive">
            <h2 class="section-title">Deep Dive</h2>
            <p>{deepDive}</p>
          </div>
        )}

        {source && (
          <div class="source-section">
            <h2 class="section-title">Source</h2>
            {sourceUrl ? (
              <p><a href={sourceUrl} target="_blank" rel="noopener noreferrer" class="source-link">{source}</a></p>
            ) : (
              <p>{source}</p>
            )}
          </div>
        )}

        {relatedLinks && relatedLinks.length > 0 && (
          <div class="related-links">
            <h2 class="section-title">Learn More</h2>
            <ul class="links-list">
              {relatedLinks.map(link => (
                <li>
                  <a href={link.url} target="_blank" rel="noopener noreferrer" class="related-link">
                    {link.title}
                    <svg class="external-icon" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                      <polyline points="15 3 21 3 21 9"></polyline>
                      <line x1="10" y1="14" x2="21" y2="3"></line>
                    </svg>
                  </a>
                  {link.description && <p class="link-description">{link.description}</p>}
                </li>
              ))}
            </ul>
          </div>
        )}
      </div>

      <!-- Back to Home -->
      <footer class="article-footer">
        <a href="/" class="back-link">← Back to all facts</a>
      </footer>
    </article>
  </main>
</BaseLayout>

<style>
  /* Reading Progress Bar */
  .progress-bar {
    position: fixed;
    top: 0;
    left: 0;
    height: 4px;
    background: var(--category-color, var(--accent));
    width: 0%;
    z-index: 1000;
    transition: width 0.1s ease-out;
    box-shadow: 0 0 8px var(--category-color, var(--accent));
  }

  .article-container {
    max-width: 720px;
    margin: 0 auto;
    padding: 3rem var(--page-gutter) 6rem;
  }

  /* Breadcrumb */
  .breadcrumb {
    font-family: var(--mono);
    font-size: 0.75rem;
    color: var(--grey-light);
    margin-bottom: 3rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .breadcrumb a {
    color: var(--grey-light);
    text-decoration: none;
    transition: color 0.3s;
  }

  .breadcrumb a:hover {
    color: var(--accent);
  }

  .breadcrumb .separator {
    margin: 0 0.5rem;
    color: var(--grey-lighter);
  }

  .breadcrumb .current {
    color: var(--grey);
  }

  /* Article Header */
  .article-header {
    margin-bottom: 3rem;
    padding-bottom: 3rem;
    border-bottom: 2px solid var(--grey-lighter);
  }

  .article-meta {
    font-family: var(--mono);
    font-size: 0.6875rem;
    color: var(--grey-light);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 2rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    align-items: center;
  }

  .category {
    color: var(--category-color, var(--accent));
    font-weight: 700;
    text-decoration: none;
    transition: opacity 0.3s ease;
  }

  .category:hover {
    opacity: 0.7;
    text-decoration: underline;
  }

  .article-meta .separator {
    color: var(--grey-lighter);
  }

  .article-title {
    font-family: var(--serif);
    font-size: clamp(2rem, 5vw, 3rem);
    font-weight: 300;
    line-height: 1.2;
    letter-spacing: -0.025em;
    margin-bottom: 2rem;
    color: var(--black);
    font-variation-settings: "opsz" 72;
  }

  .article-stats {
    display: flex;
    gap: 2rem;
  }

  .stat-badge {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 1rem 1.5rem;
    background: color-mix(in srgb, var(--category-color, var(--accent)) 10%, transparent);
    border-radius: 4px;
    border: 2px solid color-mix(in srgb, var(--category-color, var(--accent)) 20%, transparent);
  }

  .stat-label {
    font-family: var(--mono);
    font-size: 0.625rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--grey);
    font-weight: 400;
  }

  .stat-value {
    font-family: var(--mono);
    font-size: 2rem;
    font-weight: 700;
    color: var(--category-color, var(--accent));
    line-height: 1;
  }

  .stat-max {
    font-size: 1rem;
    font-weight: 400;
    color: var(--grey-light);
  }

  /* Article Content */
  .article-content {
    font-family: var(--body-serif);
    font-size: 1.1875rem;
    line-height: 1.8;
    color: #2d2d2d;
    letter-spacing: 0.002em;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    text-rendering: optimizeLegibility;
  }

  .lead {
    font-size: 1.1875rem;
    line-height: 1.8;
    margin-bottom: 1.75rem;
    letter-spacing: 0.002em;
  }

  .lead + .lead {
    margin-top: 0;
  }

  /* Drop Cap on First Paragraph */
  .first-paragraph::first-letter {
    font-family: var(--serif);
    font-size: 4.5rem;
    line-height: 0.8;
    float: left;
    margin: 0.1em 0.15em 0 0;
    color: var(--category-color, var(--accent));
    font-weight: 400;
    font-variation-settings: "opsz" 144;
  }

  .deep-dive,
  .source-section,
  .related-links {
    margin-top: 3rem;
    padding-top: 3rem;
    border-top: 2px solid var(--grey-lighter);
  }

  .section-title {
    font-family: var(--mono);
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--category-color, var(--accent));
    font-weight: 700;
    margin-bottom: 1.5rem;
  }

  .deep-dive p,
  .source-section p {
    font-size: 1.0625rem;
    line-height: 1.75;
    color: var(--grey);
  }

  .source-link {
    color: var(--category-color, var(--accent));
    text-decoration: none;
    border-bottom: 2px solid color-mix(in srgb, var(--category-color, var(--accent)) 20%, transparent);
    transition: border-color 0.3s;
  }

  .source-link:hover {
    border-bottom-color: var(--category-color, var(--accent));
  }

  /* Related Links */
  .links-list {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .related-link {
    font-family: var(--sans);
    font-size: 1rem;
    font-weight: 600;
    color: var(--black);
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 0.3s;
  }

  .related-link:hover {
    color: var(--category-color, var(--accent));
  }

  .external-icon {
    opacity: 0.5;
    transition: opacity 0.3s;
  }

  .related-link:hover .external-icon {
    opacity: 1;
  }

  .link-description {
    font-size: 0.9375rem;
    color: var(--grey);
    margin-top: 0.5rem;
  }

  /* Article Footer */
  .article-footer {
    margin-top: 4rem;
    padding-top: 3rem;
    border-top: 2px solid var(--grey-lighter);
  }

  .back-link {
    font-family: var(--mono);
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--grey);
    text-decoration: none;
    transition: color 0.3s;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .back-link:hover {
    color: var(--category-color, var(--accent));
  }

  /* Responsive */
  @media (max-width: 768px) {
    .article-container {
      padding-left: 1.5rem;
      padding-right: 1.5rem;
    }

    .article-title {
      font-size: 2rem;
    }

    .article-content {
      font-size: 1.0625rem;
    }

    .lead {
      font-size: 1.0625rem;
    }
  }
</style>

<script>
  // Reading Progress Bar
  function updateProgressBar() {
    const progressBar = document.getElementById('progressBar');
    if (!progressBar) return;

    const windowHeight = window.innerHeight;
    const documentHeight = document.documentElement.scrollHeight - windowHeight;
    const scrolled = window.scrollY;
    const progress = (scrolled / documentHeight) * 100;

    progressBar.style.width = `${Math.min(progress, 100)}%`;
  }

  // Update on scroll
  window.addEventListener('scroll', updateProgressBar, { passive: true });

  // Update on load
  window.addEventListener('load', updateProgressBar);

  // Update on resize
  window.addEventListener('resize', updateProgressBar, { passive: true });
</script>
