---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import FactCard from '../components/FactCard.astro';
import type { Fact } from '../types/fact';
import factsData from '../data/facts.json';

// Load facts from JSON file
const allFacts: Fact[] = factsData.facts;

// Show the most recent facts on homepage
const sampleFacts = allFacts.slice(0, 12);

// Calculate dynamic stats
const uniqueCategories = new Set(allFacts.map(f => f.category)).size;
const avgWonderScore = allFacts.length > 0
  ? (allFacts.reduce((sum, f) => sum + f.wonderScore, 0) / allFacts.length).toFixed(1)
  : '0.0';
---

<BaseLayout title="That's interesting.">
  <Header currentPage="facts" />

  <main class="main-container">
    <!-- Hero Section -->
    <section class="hero">
      <span class="hero-label">Daily Discoveries Since 2024</span>
      <h1>
        The <span class="highlight">"ooh, that's interesting"</span> moment.<br>
        <span class="underline">Delivered daily.</span>
      </h1>
      <p class="hero-description">
        We hunt down facts that rewire your perspective—the kind that make you stop scrolling
        and start thinking. From quantum mechanics to medieval art, if it shifts how you see the world,
        it belongs here.
      </p>
      <div class="hero-stats">
        <div class="stat-item">
          <div class="stat-number">{allFacts.length}</div>
          <div class="stat-label">Facts Published</div>
        </div>
        <div class="stat-item">
          <div class="stat-number">{uniqueCategories}</div>
          <div class="stat-label">{uniqueCategories === 1 ? 'Category' : 'Categories'}</div>
        </div>
        <div class="stat-item">
          <div class="stat-number"><span class="accent">{avgWonderScore}</span>/10</div>
          <div class="stat-label">Avg Wonder Score</div>
        </div>
      </div>
    </section>

    <!-- Divider -->
    <div class="divider"></div>

    <!-- Facts Grid -->
    <div class="facts-grid">
      {sampleFacts.map((fact, index) => (
        <FactCard fact={fact} featured={index === 0} />
      ))}
    </div>
  </main>
</BaseLayout>

<style>
  .main-container {
    max-width: var(--content-width);
    margin: 0 auto;
    padding: 0 var(--page-gutter) var(--space-3xl);
    position: relative;
  }

  /* Hero Section */
  .hero {
    padding: var(--space-3xl) 0 var(--space-xl);
  }

  .hero-label {
    font-family: var(--mono);
    font-size: 0.6875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--accent);
    font-weight: 400;
    margin-bottom: var(--space-lg);
    display: inline-block;
    padding: var(--space-xs) var(--space-sm);
    background: var(--accent-light);
    border-radius: 2px;
    transition: transform 0.3s var(--ease-spring);
    animation: slideIn 0.8s ease;
  }

  .hero-label:hover {
    transform: scale(1.05) rotate(-2deg);
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .hero h1 {
    font-family: var(--serif);
    font-size: clamp(2.75rem, 7vw, 5rem);
    font-weight: 300;
    line-height: 1.15;
    letter-spacing: -0.025em;
    margin-bottom: var(--space-lg);
    max-width: 900px;
    font-variation-settings: "opsz" 144;
  }

  .hero h1 .highlight {
    background: linear-gradient(180deg, transparent 60%, var(--accent-light) 60%);
    font-style: italic;
  }

  .hero h1 .underline {
    position: relative;
    display: inline-block;
  }

  .hero h1 .underline::after {
    content: '';
    position: absolute;
    bottom: 0.1em;
    left: 0;
    right: 0;
    height: 0.15em;
    background: var(--accent);
    opacity: 0.3;
    transform: skewY(-1deg);
  }

  .hero-description {
    font-family: var(--sans);
    font-size: 1.125rem;
    line-height: 1.65;
    color: var(--grey);
    max-width: 680px;
    margin-bottom: var(--space-xl);
    font-weight: 400;
  }

  .hero-stats {
    display: flex;
    gap: var(--space-xl);
    flex-wrap: wrap;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .stat-number {
    font-family: var(--mono);
    font-size: 3rem;
    font-weight: 700;
    color: var(--black);
    line-height: 1;
    letter-spacing: -0.025em;
    font-feature-settings: "tnum" 1;
    transition: transform 0.3s ease;
  }

  .stat-item:hover .stat-number {
    transform: scale(1.05);
  }

  .stat-number .accent {
    color: var(--accent);
    display: inline-block;
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }

  .stat-label {
    font-family: var(--mono);
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--grey-light);
    font-weight: 400;
  }

  /* Divider */
  .divider {
    height: 2px;
    background: var(--black);
    margin: var(--space-xl) 0 var(--space-2xl);
    position: relative;
  }

  .divider::after {
    content: '✦';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--off-white);
    padding: 0 var(--space-sm);
    font-size: 0.875rem;
    color: var(--accent);
    animation: rotate 15s linear infinite;
  }

  @keyframes rotate {
    from { transform: translate(-50%, -50%) rotate(0deg); }
    to { transform: translate(-50%, -50%) rotate(360deg); }
  }

  /* Facts Grid - Bento Box Style */
  .facts-grid {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: var(--space-lg);
  }

  @media (max-width: 1024px) {
    .facts-grid {
      grid-template-columns: 1fr;
    }

    .hero-stats {
      gap: var(--space-lg);
    }
  }

  @media (max-width: 768px) {
    .main-container {
      padding-left: var(--space-md);
      padding-right: var(--space-md);
    }

    .hero {
      padding: var(--space-2xl) 0 var(--space-xl);
    }

    .hero h1 {
      font-size: 2.5rem;
    }

    .hero-description {
      font-size: 1.0625rem;
    }

    .hero-stats {
      gap: var(--space-lg);
      flex-direction: column;
    }

    .divider {
      margin: var(--space-xl) 0 var(--space-lg);
    }
  }
</style>
