---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import FactCard from '../components/FactCard.astro';
import type { Fact } from '../types/fact';
import factsData from '../data/facts.json';

// Load facts from JSON file
const allFacts: Fact[] = factsData.facts;

// Show the most recent 10 facts on homepage
const sampleFacts = allFacts.slice(0, 10);

---

<BaseLayout title="That's interesting.">
  <Header currentPage="facts" />

  <div class="container">
    <!-- Facts Container -->
    <main class="facts-container reading-mode" id="factsContainer">
      {sampleFacts.map((fact, index) => (
        <FactCard fact={fact} mode="reading" featured={index === 0} />
      ))}
    </main>
  </div>

  <!-- Mode Toggle -->
  <div class="mode-toggle">
    <button class="mode-btn active" data-mode="reading">Reading</button>
    <button class="mode-btn" data-mode="explore">Explore</button>
  </div>

  <!-- Loading indicator -->
  <div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
    <p class="loading-text">Consulting ancient texts...</p>
  </div>
</BaseLayout>

<style>
  .container {
    max-width: var(--content-width);
    margin: 0 auto;
    padding: 0 var(--page-gutter) 5rem;
    position: relative;
  }

  /* Facts Container */
  .facts-container {
    margin-bottom: 4rem;
  }

  .facts-container.reading-mode {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  /* Asymmetric spacing - magazine style */
  .facts-container.reading-mode .fact:nth-child(3n+1) {
    margin-left: 0;
    max-width: 95%;
  }

  .facts-container.reading-mode .fact:nth-child(3n+2) {
    margin-left: auto;
    max-width: 92%;
  }

  .facts-container.reading-mode .fact:nth-child(3n) {
    margin-left: 0;
    max-width: 100%;
  }

  .facts-container.explore-mode {
    min-height: 180vh;
    position: relative;
  }

  /* Mode Toggle */
  .mode-toggle {
    position: fixed;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0;
    z-index: 1000;
    background: var(--surface);
    border: 1px solid var(--border);
    border-radius: 3px;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.04);
  }

  .mode-btn {
    padding: 0.75rem 2rem;
    background: transparent;
    border: none;
    font-family: var(--font-mono);
    font-size: 0.65rem;
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: var(--text-lighter);
    border-right: 1px solid var(--border);
  }

  .mode-btn:last-child {
    border-right: none;
  }

  .mode-btn.active {
    background: var(--text);
    color: var(--surface);
  }

  /* Loading overlay */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(250, 250, 250, 0.95);
    backdrop-filter: blur(8px);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 2000;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .loading-overlay.active {
    opacity: 1;
    pointer-events: all;
  }

  .loading-spinner {
    width: 50px;
    height: 50px;
    border: 3px solid var(--border);
    border-top-color: var(--accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .loading-text {
    margin-top: 1.5rem;
    font-family: var(--font-mono);
    font-size: 0.9rem;
    color: var(--text-light);
    letter-spacing: 0.05em;
  }

  @media (max-width: 640px) {
    .container {
      padding: 0 1.25rem;
    }

    .mode-toggle {
      bottom: 1rem;
      left: 1rem;
      transform: none;
    }

    .mode-btn {
      padding: 0.65rem 1.5rem;
    }
  }

  @media (max-width: 480px) {
    .mode-toggle {
      flex-direction: column;
    }

    .mode-btn {
      border-right: none;
      border-bottom: 1px solid var(--border);
    }

    .mode-btn:last-child {
      border-bottom: none;
    }
  }
</style>

<script>
  let currentMode: 'reading' | 'explore' = 'reading';

  // Mode switching
  document.querySelectorAll('.mode-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const target = e.target as HTMLButtonElement;
      const mode = target.dataset.mode as 'reading' | 'explore';

      currentMode = mode;

      document.querySelectorAll('.mode-btn').forEach(b => b.classList.remove('active'));
      target.classList.add('active');

      const container = document.getElementById('factsContainer');
      const facts = document.querySelectorAll('.fact');

      if (container) {
        container.className = `facts-container ${mode}-mode`;

        if (mode === 'explore') {
          arrangeExploreMode();
        } else {
          // Reset reading mode styles
          facts.forEach(fact => {
            const element = fact as HTMLElement;
            element.style.position = '';
            element.style.top = '';
            element.style.left = '';
            element.style.right = '';
            element.style.transform = '';
            element.style.transition = '';
            element.style.cursor = '';
            element.style.zIndex = '';
          });
        }
      }
    });
  });

  // Drag and drop state
  let isDragging = false;
  let currentDragElement: HTMLElement | null = null;
  let dragOffset = { x: 0, y: 0 };

  // Arrange facts in explore mode
  function arrangeExploreMode() {
    const facts = document.querySelectorAll('.fact');
    const positions = [
      { top: '5%', left: '8%', rotation: '-1.5deg' },
      { top: '25%', right: '12%', rotation: '1.2deg' },
      { top: '45%', left: '20%', rotation: '-0.8deg' },
      { top: '65%', right: '8%', rotation: '1.8deg' },
      { top: '85%', left: '12%', rotation: '-1.2deg' },
      { top: '105%', right: '18%', rotation: '0.8deg' }
    ];

    facts.forEach((fact, index) => {
      const element = fact as HTMLElement;
      const pos = positions[index] || positions[0];

      element.style.position = 'absolute';
      element.style.top = pos.top;
      element.style.left = pos.left || 'auto';
      element.style.right = pos.right || 'auto';
      element.style.transform = `rotate(${pos.rotation})`;
      element.style.transition = 'all 1s var(--ease-smooth)';
      element.style.cursor = 'grab';

      // Add drag listeners
      element.addEventListener('mousedown', startDrag);
      element.addEventListener('touchstart', startDrag, { passive: false });
    });
  }

  function startDrag(e: MouseEvent | TouchEvent) {
    if (currentMode !== 'explore') return;

    // Don't drag if clicking on details/summary
    const target = e.target as HTMLElement;
    if (target.tagName === 'SUMMARY' || target.tagName === 'DETAILS') return;

    isDragging = true;
    currentDragElement = e.currentTarget as HTMLElement;
    currentDragElement.style.cursor = 'grabbing';
    currentDragElement.style.zIndex = '1000';
    currentDragElement.style.transition = 'none';

    const rect = currentDragElement.getBoundingClientRect();
    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY;

    dragOffset.x = clientX - rect.left;
    dragOffset.y = clientY - rect.top;

    e.preventDefault();
  }

  function drag(e: MouseEvent | TouchEvent) {
    if (!isDragging || !currentDragElement) return;

    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY;

    const container = document.getElementById('factsContainer');
    if (!container) return;

    const containerRect = container.getBoundingClientRect();
    const x = ((clientX - containerRect.left - dragOffset.x) / containerRect.width) * 100;
    const y = ((clientY - containerRect.top - dragOffset.y) / containerRect.height) * 100;

    currentDragElement.style.left = Math.max(0, Math.min(75, x)) + '%';
    currentDragElement.style.top = Math.max(0, Math.min(90, y)) + '%';
    currentDragElement.style.right = 'auto';

    e.preventDefault();
  }

  function endDrag() {
    if (!isDragging || !currentDragElement) return;

    isDragging = false;
    currentDragElement.style.cursor = 'grab';
    currentDragElement.style.zIndex = '';
    currentDragElement.style.transition = 'all 0.3s ease';
    currentDragElement = null;
  }

  // Add global drag listeners
  document.addEventListener('mousemove', drag);
  document.addEventListener('mouseup', endDrag);
  document.addEventListener('touchmove', drag, { passive: false });
  document.addEventListener('touchend', endDrag);

</script>
