---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import type { Fact } from '../types/fact';
import factsData from '../data/facts.json';

// Load all facts from JSON file
const allFacts: Fact[] = factsData.facts;

// Get unique categories
const categories = [...new Set(allFacts.map(f => f.category))].sort();

// Calculate stats
const avgScore = (allFacts.reduce((sum, f) => sum + (f.wonderScore || 0), 0) / allFacts.length).toFixed(1);
const currentMonth = new Date().getMonth();
const currentYear = new Date().getFullYear();
const thisMonthCount = allFacts.filter(f => {
  if (!f.generated) return false;
  const date = new Date(f.generated);
  return date.getMonth() === currentMonth && date.getFullYear() === currentYear;
}).length;
---

<BaseLayout title="Archive - That's interesting.">
  <Header currentPage="archive" />

  <main class="archive-container">
    <!-- Archive Header -->
    <div class="archive-header">
      <h1 class="archive-title">Archive</h1>
      <p class="archive-description">
        Every discovery we've shared, organized for exploration. Filter by category,
        sort by wonder score, or search for something specific.
      </p>
    </div>

    <!-- Stats Bar -->
    <div class="stats-bar">
      <div class="stat-item">
        <span class="stat-number">{allFacts.length}</span>
        <span class="stat-label">Total Facts</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{categories.length}+</span>
        <span class="stat-label">Categories</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{avgScore}</span>
        <span class="stat-label">Avg Score</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{thisMonthCount}</span>
        <span class="stat-label">This Month</span>
      </div>
    </div>

    <!-- Filters -->
    <div class="filters">
      <div class="filter-group">
        <label for="search">Search</label>
        <input
          type="text"
          id="search"
          class="search-input"
          placeholder="Search by title, content, or category..."
        >
      </div>
      <div class="filter-group">
        <label for="category">Category</label>
        <select id="category" class="filter-select">
          <option value="">All Categories</option>
          {categories.map(cat => (
            <option value={cat}>{cat}</option>
          ))}
        </select>
      </div>
      <div class="filter-group">
        <label for="sort">Sort By</label>
        <select id="sort" class="filter-select">
          <option value="date">Latest First</option>
          <option value="score">Highest Score</option>
          <option value="title">Alphabetical</option>
        </select>
      </div>
    </div>

    <!-- Category Quick Filters -->
    <div class="category-filters">
      <button class="category-tag active" data-category="">All</button>
      {categories.slice(0, 8).map(cat => (
        <button class="category-tag" data-category={cat}>{cat}</button>
      ))}
    </div>

    <!-- Archive List -->
    <div class="archive-list">
      {allFacts.map(fact => {
        const date = fact.generated ? new Date(fact.generated) : new Date();
        const formattedDate = date.toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric'
        });
        const excerpt = fact.content.substring(0, 150) + (fact.content.length > 150 ? '...' : '');

        return (
          <a href={`/fact/${fact.id}`} class="archive-item" data-category={fact.category} data-title={fact.title.toLowerCase()} data-content={fact.content.toLowerCase()}>
            <div class="archive-content">
              <div class="archive-meta">
                <span class="archive-category">{fact.category}</span>
                <span class="archive-date">{formattedDate}</span>
              </div>
              <h2 class="archive-title-text">{fact.title}</h2>
              <p class="archive-excerpt">{excerpt}</p>
            </div>
            <div class="archive-score">
              <span class="score-number">{fact.wonderScore || 0}</span>
              <span class="score-label">Wonder</span>
            </div>
          </a>
        );
      })}
    </div>
  </main>
</BaseLayout>

<style>
  .archive-container {
    max-width: var(--content-width);
    margin: 0 auto;
    padding: 4rem var(--page-gutter) 6rem;
  }

  /* Archive Header */
  .archive-header {
    margin-bottom: 3rem;
  }

  .archive-title {
    font-family: var(--serif);
    font-size: clamp(2.5rem, 7vw, 4rem);
    font-weight: 300;
    line-height: 1.1;
    letter-spacing: -0.025em;
    margin-bottom: 1rem;
    font-variation-settings: "opsz" 144;
  }

  .archive-description {
    font-family: var(--sans);
    font-size: 1.125rem;
    color: var(--grey);
    max-width: 600px;
    line-height: 1.6;
  }

  /* Stats Bar */
  .stats-bar {
    display: flex;
    gap: 3rem;
    padding: 2rem 0;
    border-bottom: 2px solid var(--grey-lighter);
    margin-bottom: 3rem;
    flex-wrap: wrap;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .stat-number {
    font-family: var(--sans);
    font-size: 2rem;
    font-weight: 700;
    color: var(--black);
    line-height: 1;
    letter-spacing: -0.025em;
  }

  .stat-label {
    font-family: var(--sans);
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: var(--grey-light);
    font-weight: 600;
  }

  /* Filters */
  .filters {
    background: var(--white);
    padding: 2rem;
    border: 2px solid var(--grey-lighter);
    margin-bottom: 3rem;
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    gap: 1.5rem;
    align-items: end;
  }

  .filter-group label {
    font-family: var(--sans);
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: var(--grey);
    font-weight: 600;
    display: block;
    margin-bottom: 0.75rem;
  }

  .search-input {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid var(--grey-lighter);
    font-family: var(--sans);
    font-size: 0.9375rem;
    background: var(--off-white);
    transition: border-color 0.3s;
  }

  .search-input:focus {
    outline: none;
    border-color: var(--accent);
  }

  .filter-select {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid var(--grey-lighter);
    font-family: var(--sans);
    font-size: 0.9375rem;
    background: var(--off-white);
    cursor: pointer;
    transition: border-color 0.3s;
  }

  .filter-select:focus {
    outline: none;
    border-color: var(--accent);
  }

  /* Category Tags */
  .category-filters {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 3rem;
  }

  .category-tag {
    font-family: var(--sans);
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    padding: 0.5rem 1rem;
    background: var(--white);
    border: 2px solid var(--grey-lighter);
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    color: var(--grey);
  }

  .category-tag:hover {
    border-color: var(--accent);
    color: var(--accent);
  }

  .category-tag.active {
    background: var(--accent);
    color: var(--white);
    border-color: var(--accent);
  }

  /* Archive List */
  .archive-list {
    display: flex;
    flex-direction: column;
    gap: 0;
    contain: layout style;
  }

  .archive-item {
    background: var(--white);
    padding: 2rem;
    border: 2px solid var(--grey-lighter);
    border-top: none;
    transition: transform 0.3s var(--ease-spring), background 0.3s ease, border-color 0.3s ease;
    position: relative;
    text-decoration: none;
    color: inherit;
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 2rem;
    align-items: center;
    will-change: transform;
  }

  .archive-item:first-child {
    border-top: 2px solid var(--grey-lighter);
  }

  .archive-item:hover {
    background: var(--accent-light);
    border-color: var(--accent);
    transform: translate3d(8px, 0, 0);
    z-index: 1;
  }

  .archive-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background: transparent;
    transition: background 0.3s var(--ease-spring);
  }

  .archive-item:hover::before {
    background: var(--accent);
  }

  .archive-content {
    flex: 1;
  }

  .archive-meta {
    display: flex;
    gap: 1.5rem;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .archive-category {
    font-family: var(--sans);
    font-size: 0.6875rem;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: var(--accent);
    font-weight: 700;
  }

  .archive-date {
    font-family: var(--sans);
    font-size: 0.75rem;
    color: var(--grey-light);
    font-weight: 500;
  }

  .archive-title-text {
    font-family: var(--serif);
    font-size: 1.5rem;
    font-weight: 400;
    line-height: 1.3;
    margin-bottom: 0.75rem;
    letter-spacing: -0.015em;
    font-variation-settings: "opsz" 48;
  }

  .archive-excerpt {
    font-family: var(--sans);
    font-size: 0.9375rem;
    line-height: 1.65;
    color: var(--grey);
  }

  .archive-score {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    min-width: 80px;
  }

  .score-number {
    font-family: var(--sans);
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--accent);
    line-height: 1;
    transition: transform 0.3s var(--ease-spring);
  }

  .archive-item:hover .score-number {
    transform: scale(1.1);
  }

  .score-label {
    font-family: var(--sans);
    font-size: 0.625rem;
    text-transform: uppercase;
    letter-spacing: 0.12em;
    color: var(--grey-light);
    font-weight: 600;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .filters {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .archive-container {
      padding: 3rem 1.5rem 4rem;
    }

    .archive-title {
      font-size: 2.5rem;
    }

    .stats-bar {
      gap: 2rem;
    }

    .archive-item {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      padding: 1.5rem;
    }

    .archive-score {
      flex-direction: row;
      justify-content: space-between;
      min-width: 100%;
    }

    .category-filters {
      gap: 0.75rem;
    }
  }
</style>

<script>
  // Search functionality
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const categorySelect = document.getElementById('category') as HTMLSelectElement;
  const sortSelect = document.getElementById('sort') as HTMLSelectElement;
  const categoryTags = document.querySelectorAll('.category-tag');
  const archiveItems = document.querySelectorAll('.archive-item');

  function filterAndSort() {
    const searchQuery = searchInput?.value.toLowerCase() || '';
    const selectedCategory = categorySelect?.value || '';
    const sortBy = sortSelect?.value || 'date';

    // Convert NodeList to Array for filtering
    let items = Array.from(archiveItems);

    // Filter
    items.forEach(item => {
      const element = item as HTMLElement;
      const category = element.dataset.category || '';
      const title = element.dataset.title || '';
      const content = element.dataset.content || '';

      const matchesSearch = !searchQuery || title.includes(searchQuery) || content.includes(searchQuery);
      const matchesCategory = !selectedCategory || category === selectedCategory;

      element.style.display = (matchesSearch && matchesCategory) ? 'grid' : 'none';
    });

    // Sort
    const visibleItems = items.filter(item => (item as HTMLElement).style.display !== 'none');
    const parent = archiveItems[0]?.parentElement;

    if (parent) {
      visibleItems.sort((a, b) => {
        const aEl = a as HTMLElement;
        const bEl = b as HTMLElement;

        if (sortBy === 'score') {
          const aScore = parseFloat(aEl.querySelector('.score-number')?.textContent || '0');
          const bScore = parseFloat(bEl.querySelector('.score-number')?.textContent || '0');
          return bScore - aScore;
        } else if (sortBy === 'title') {
          const aTitle = aEl.dataset.title || '';
          const bTitle = bEl.dataset.title || '';
          return aTitle.localeCompare(bTitle);
        }
        return 0; // date (default order)
      });

      // Re-append in sorted order
      visibleItems.forEach(item => parent.appendChild(item));
    }
  }

  // Event listeners
  searchInput?.addEventListener('input', filterAndSort);
  categorySelect?.addEventListener('change', filterAndSort);
  sortSelect?.addEventListener('change', filterAndSort);

  // Category tag clicks
  categoryTags.forEach(tag => {
    tag.addEventListener('click', () => {
      categoryTags.forEach(t => t.classList.remove('active'));
      tag.classList.add('active');

      const category = (tag as HTMLElement).dataset.category || '';
      if (categorySelect) {
        categorySelect.value = category;
        filterAndSort();
      }
    });
  });
</script>
