---
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import FactCard from '../components/FactCard.astro';
import type { Fact } from '../types/fact';
import factsData from '../data/facts.json';

// Load all facts from JSON file
const allFacts: Fact[] = factsData.facts;

// Organize facts by category
const factsByCategory: Record<string, Fact[]> = {};
allFacts.forEach(fact => {
  if (!factsByCategory[fact.category]) {
    factsByCategory[fact.category] = [];
  }
  factsByCategory[fact.category].push(fact);
});
---

<BaseLayout title="Archive - Wonder Stream">
  <Header currentPage="archive" />

  <div class="container">
    <main class="content">
      <div class="intro">
        <h2 class="page-title">Archive</h2>
        <p class="archive-intro">All facts organized by category</p>
      </div>

      <!-- Search -->
      <div class="search-container">
        <input
          type="text"
          class="search-input"
          placeholder="Search facts..."
          id="searchInput"
        />
      </div>

      {Object.entries(factsByCategory).map(([category, facts]) => (
        <section class="category-section">
          <h3 class="category-title">{category}</h3>
          <div class="facts-list">
            {facts.map((fact) => (
              <FactCard fact={fact} mode="reading" />
            ))}
          </div>
        </section>
      ))}
    </main>
  </div>
</BaseLayout>

<style>
  .container {
    max-width: var(--content-width);
    margin: 0 auto;
    padding: 0 var(--page-gutter) var(--section-gap);
  }

  .content {
    padding-top: 0;
  }

  .intro {
    margin-bottom: 2.5rem;
  }

  .page-title {
    font-family: var(--font-display);
    font-size: 2.25rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
    margin-top: 0;
    color: var(--text);
    letter-spacing: -0.025em;
    line-height: 1.25;
  }

  .archive-intro {
    color: var(--text-lighter);
    font-size: 0.85rem;
    margin: 0;
    font-style: italic;
  }

  .category-section {
    margin-bottom: 3.5rem;
  }

  .category-section:last-child {
    margin-bottom: 0;
  }

  .category-title {
    font-family: var(--font-mono);
    font-size: 0.6rem;
    text-transform: uppercase;
    letter-spacing: 0.15em;
    color: var(--text-lightest);
    margin-bottom: 1.5rem;
    padding-bottom: 0;
    border-bottom: none;
  }

  .facts-list {
    display: flex;
    flex-direction: column;
    gap: 0;
    border-top: 1px solid var(--border);
  }

  .search-container {
    margin-bottom: 2.5rem;
    position: relative;
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .search-input {
    flex: 1;
    font-size: 0.75rem;
    font-family: var(--font-mono);
    border: 1px solid var(--border);
    background: var(--surface);
    padding: 0.65rem 0.85rem;
    color: var(--text);
    border-radius: 3px;
    transition: all 0.2s var(--ease);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--text-lighter);
    background: var(--surface);
  }

  .search-input::placeholder {
    color: var(--text-lightest);
    font-style: normal;
  }

  @media (max-width: 640px) {
    .container {
      padding: 0 1.25rem 3rem;
    }

    .page-title {
      font-size: 1.85rem;
    }
  }
</style>

<script>
  // Search functionality
  document.getElementById('searchInput')?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value.toLowerCase();
    const facts = document.querySelectorAll('.fact');
    const categories = document.querySelectorAll('.category-section');

    facts.forEach(fact => {
      const element = fact as HTMLElement;
      const title = fact.querySelector('.fact-title')?.textContent?.toLowerCase() || '';
      const content = fact.querySelector('.fact-content')?.textContent?.toLowerCase() || '';
      const category = fact.querySelector('.fact-category')?.textContent?.toLowerCase() || '';

      const matches = title.includes(query) || content.includes(query) || category.includes(query);

      element.style.display = matches || query.length < 2 ? 'block' : 'none';
    });

    // Hide empty categories
    categories.forEach(category => {
      const categoryElement = category as HTMLElement;
      const visibleFacts = categoryElement.querySelectorAll('.fact[style*="display: block"], .fact:not([style*="display: none"])');
      categoryElement.style.display = visibleFacts.length > 0 || query.length < 2 ? 'block' : 'none';
    });
  });
</script>
